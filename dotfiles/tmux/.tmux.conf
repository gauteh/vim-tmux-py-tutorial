#rebind C-a as prefix
set -g prefix C-a
bind C-a send-prefix

# Get truecolor support
#set-option -ga terminal-overrides ",xterm-256color:Tc"
set-option -g default-terminal "screen-256color"

set-option -g status-keys vi
set-option -g update-environment "DISPLAY"
set-option -g set-titles on
set-option -g set-titles-string '#S> #I.#P #W'
set-option -g mouse on
unbind -T copy-mode-vi MouseDragEnd1Pane
unbind -T copy-mode MouseDragEnd1Pane

set -g history-limit 40000

set -sg escape-time 0
set-option -sg xterm-keys on

set -sg focus-events on

# Rename if I don't specify one
set-window-option -g automatic-rename on

# But don't allow windows to override mine.
set-window-option -g allow-rename off

set-window-option -g mode-keys vi
set-window-option -g aggressive-resize on
set-window-option -g clock-mode-style 12

set -g visual-activity off
set -g monitor-activity on
# set -g visual-bell on
set -g base-index 1
set -g status-bg default
set -g status-fg white
set -g renumber-windows on
set -g bell-action any
set -g display-panes-time 2000

# set-option -g pane-border-fg colour237
# set-option -g pane-active-border-fg colour237

set -g status-justify left
set -g status-position bottom
# set -g window-status-activity-bg yellow # actually fg
# set -g window-status-activity-fg colour0 # actually bg

# set -g window-status-bell-bg yellow # actually fg
# set -g window-status-bell-fg colour0 # actually bg

set -g window-status-current-format "#[bg=brightblue,fg=black] #I › #W "

set -g window-status-format " #I › #W "
set -g window-status-separator ""

# set -g window-status-activity-bg default
# set -g window-status-activity-fg cyan
# set -g window-status-activity-attr bold

set -g status-left-length 20
set -g status-right-length 40
# set -g status-left "#[bg=brightgreen,fg=black] Sess: #S "
# set -g status-right "#[bg=brightgreen,fg=black] #h "

bind-key -r H resize-pane -L 3
bind-key -r J resize-pane -D 3
bind-key -r K resize-pane -U 3
bind-key -r L resize-pane -R 3

bind-key -r c new-window -c '#{pane_current_path}'

bind R source-file ~/.tmux.conf \; display-message "  Config reloaded..."

# bind-key n command-prompt -p "rename window to:" "rename-window '%%'"

bind-key C-t select-layout main-vertical
bind-key C-b select-layout main-horizontal
bind-key C-g select-layout tiled

bind-key g command-prompt -p "grab pane from:" "join-pane -s '%%'"
bind-key D command-prompt -p "dispatch pane to:" "join-pane -t '%%'"
# bind-key S command-prompt -p "swap window with:" "swap-window -t ':%%'"
bind-key S choose-tree

# change windows
# bind-key Super_L-n nnextext-window
bind-key P previous-window

#sane split keybinds
unbind %
unbind '"'
bind v split-window -h -c '#{pane_current_path}'
bind s split-window -v -c '#{pane_current_path}'

unbind [
bind Escape copy-mode
bind ø copy-mode

unbind p
bind p paste-buffer
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle

# tmux-yank
set -g @yank_selection 'clipboard'
set -g set-clipboard on
# set -g set-clipboard external

## vim tmux navigator (but with Alt key)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-h if-shell "$is_vim" "send-keys M-h"  "select-pane -L"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j"  "select-pane -D"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k"  "select-pane -U"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l"  "select-pane -R"
# bind-key -n M-\ if-shell "$is_vim" "send-keys M-\\" "select-pane -l"

bind-key -T copy-mode-vi M-h select-pane -L
bind-key -T copy-mode-vi M-j select-pane -D
bind-key -T copy-mode-vi M-k select-pane -U
bind-key -T copy-mode-vi M-l select-pane -R
# bind-key -T copy-mode-vi M-\ select-pane -l

# mac os english layout
# bind-key -n C-w-h if-shell "$is_vim" "send-keys M-h"  "select-pane -L"
# bind-key -n C-w-j if-shell "$is_vim" "send-keys M-j"  "select-pane -D"
# bind-key -n C-w-k if-shell "$is_vim" "send-keys M-k"  "select-pane -U"
# bind-key -n C-w-l if-shell "$is_vim" "send-keys M-l"  "select-pane -R"
# bind-key -T copy-mode-vi C-w-h select-pane -L
# bind-key -T copy-mode-vi C-w-j select-pane -D
# bind-key -T copy-mode-vi C-w-k select-pane -U
# bind-key -T copy-mode-vi C-w-l select-pane -R

# mac os iterm2
bind-key -n ˛ if-shell "$is_vim" "send-keys M-h"  "select-pane -L"
bind-key -n √ if-shell "$is_vim" "send-keys M-j"  "select-pane -D"
bind-key -n ª if-shell "$is_vim" "send-keys M-k"  "select-pane -U"
bind-key -n ﬁ if-shell "$is_vim" "send-keys M-l"  "select-pane -R"
bind-key -T copy-mode-vi ˛ select-pane -L
bind-key -T copy-mode-vi √ select-pane -D
bind-key -T copy-mode-vi ª select-pane -U
bind-key -T copy-mode-vi ﬁ select-pane -R

unbind-key -T copy-mode-vi C-h
unbind-key -T copy-mode-vi C-j
unbind-key -T copy-mode-vi C-k
unbind-key -T copy-mode-vi C-l
unbind-key -T root C-h
unbind-key -T root C-j
unbind-key -T root C-k
unbind-key -T root C-l

# window navigation
bind-key -n M-n next-window
bind-key -n M-p previous-window
bind-key -n M-N new-window
bind-key -T copy-mode-vi M-n next-window
bind-key -T copy-mode-vi M-p previous-window

bind-key -n ‘ next-window
bind-key -n π previous-window
bind-key -n “ new-window
bind-key -T copy-mode-vi ‘ next-window
bind-key -T copy-mode-vi π previous-window

# Renew environment
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind 'E' run "~/.tmux/renew_env.sh"

# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================
color_black="colour232"
color_dark="$color_black"
color_status_text="colour245"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"

separator_powerline_left=""
separator_powerline_right=""

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind-key -T root S-Up \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
        if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind-key -T off S-Up \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S \;\



##########
# Plugins

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @plugin 'christoomey/vim-tmux-navigator'
# set -g @plugin 'odedlaz/tmux-onedark-theme'
# set -g @plugin 'jimeh/tmux-themepack'
# set -g @themepack 'powerline/default/black'

# Install TPM
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# must be at the bottom
run '~/.tmux/plugins/tpm/tpm'

# Status line
wg_date="#[fg=$color_secondary]%h %d %H:%M#[default]"
wg_user_host="#[fg=$color_secondary]#(whoami)#[default]@#H"
wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo '[disabled ^^^]')#[default]"
set -g status-right "$wg_is_keys_off $wg_user_host | $wg_date"

